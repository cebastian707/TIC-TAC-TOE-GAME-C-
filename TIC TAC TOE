# TIC-TAC-TOE-GAME-C-
TIC TAC TOE GAME USING MINIMAX
//HEADER FLILE
#pragma once
#include<iostream>
#pragma warning(disable:4996)
#include<iomanip>
#include"Tic_Tac_Toe.h"
#include<algorithm>
#include<limits.h>

using namespace std;

class Tic_Tac_Toe
{
private:
	int static const Num_Rows = 3;
	int static const Num_Cols = 3;
	struct Minimax
	{
		int row = 0;
		int col = 0;
	};
	enum class Player
	{
		none = '-',
		PLAYER_ONE = 'X',
		PLAYER_TWO = 'O',
		COMPUTER = 'O'
	};
	Player Board[Num_Rows][Num_Cols];
	Minimax Move() {
		int score = numeric_limits<int>::max();
		Minimax Moves;
		for (int row = 0; row < Num_Rows; row++)
		{
			for (int col = 0; col < Num_Cols; col++)
			{
				if (Board[row][col] == Player::none)
				{
					Board[row][col] = Player::COMPUTER;
					int temp = maxsearch();
					Board[row][col] = Player::none;
					if (temp < score)
					{
						score = temp;
						Moves.row = row;
						Moves.col = col;
					}
				}
			}
		}
		return Moves;
	}
public:
	int checkspaces(Player play) {
		for (int row = 0; row < Num_Rows; row++)
		{
			for (int col = 0; col < Num_Cols; col++)
			{
				if (Board[row][col] == play)
				{
					return 0;
				}
			}

		}
		return 1;
	}
	int Full_Board()const;
	void choose();
	void Computer_Movie();
	void AI_GAME();
	int maxsearch();
	int minsearch();
    void player_one();
	void player_Two();
	Tic_Tac_Toe();
	void print_Board();
	bool ISTIE(Player play);
	void Game();
	bool CHECK_WINNER(Player);
	void displayboard() {
		for (int row = 2; row < Num_Rows; row++)
		{
			cout << setw(25) << " 1 |    2    |  3 " << endl;
			for (int col = 2; col < Num_Cols; col++)
			{
				cout << setw(25) << " --------------------------------  " << endl;
				cout << setw(25) << " 4 |    5    |  6 " << endl;
				cout << setw(25) << " --------------------------------  " << endl;
			}
			cout << setw(25) << " 7 |    8    |  9 " << endl;
		}
	}
};


//FILE TO WORK WITH THE FUNCTIONS IN THE HEADER FILE

#pragma warning(disable:4996)
#include<iostream>
#include<iomanip>
#include"Tic_Tac_Toe.h"
#include<algorithm>
#include<limits>

using namespace std;

int Tic_Tac_Toe::Full_Board()const {
	for (int row = 0; row < Num_Rows; row++)
	{
		for (int col = 0; col < Num_Cols; col++)
		{
			if (Board[row][col] == Player::none)
			{
				return 0;
			}
		}
	}
	return 1;
}


void Tic_Tac_Toe::choose() {
	int num = 0;
	cout << " Welcome to Tic Tac Toe 2.0 ! " << endl;
	cout << " **************************** " << endl;
	cout << " 1.Human Vs Human " <<endl;
	cout << " 2. AI Vs Human " << endl;
	cout << " ****************************\n " << endl;
	cout << endl;
	cout << " What Do you want to play?: ";
	cin >> num;
	while (num < 0  || num > 2 || !cin)
	{
		cin.clear();
		cin.ignore('300', '\n');
		cout << " You typed something incorrect retype ! " << endl;
		cout << " What Do you want to play: ?";
		cin >> num;
	}
	switch (num)
	{
	case 1:Game();
		break;
	case 2:AI_GAME();
		break;
	}	

}

int Tic_Tac_Toe::maxsearch() {
	if (CHECK_WINNER(Player::PLAYER_ONE))
	{
		return 10;
	}
	else if (CHECK_WINNER(Player::COMPUTER))
	{
		return -10;
	}
	else if (ISTIE(Player::none))
	{
		return 0;
	}
		int score = numeric_limits<int>::min();
		for (int row = 0; row < Num_Rows; row++)
		{
			for (int col = 0; col < Num_Cols; col++)
			{
				if (Board[row][col] == Player::none)
				{
					Board[row][col] = Player::PLAYER_ONE;
					score = max(score, minsearch());
					Board[row][col] = Player::none;
				}
			}
		}
		return score;
	
}

int Tic_Tac_Toe::minsearch() {
	if (CHECK_WINNER(Player::PLAYER_ONE))
	{
		return 10;
	}
	else if (CHECK_WINNER(Player::COMPUTER))
	{
		return -10;
	}
	else if (ISTIE(Player::none))
	{
		return 0;
	}
	int score = numeric_limits<int>::max();
	for (int row = 0; row < Num_Rows; row++)
	{
		for (int col = 0; col < Num_Cols; col++)
		{
			if (Board[row][col] == Player::none)
			{
				Board[row][col] = Player::COMPUTER;
				score = min(score, maxsearch());
				Board[row][col] = Player::none;
			}
		}
	}
	return score;
}


void Tic_Tac_Toe::AI_GAME() {
	cout << " ***************** " << endl;
	cout << " Human VS Computer " << endl;
	cout << " -----------------\n " << endl;
	cout << endl;
	displayboard();
	cout << endl;
	while (ISTIE(Player::none) == false)
	{
		player_one();
		if (CHECK_WINNER(Player::PLAYER_ONE) == true)
		{
			cout << " Fuck you you won! " << endl;
			break;
		}
		Computer_Movie();
		if (CHECK_WINNER(Player::COMPUTER) == true)
		{
			cout << endl;
			cout << setw(35) << " I won bitch as Human!" << endl;
			exit(0);
		}

	}
}

void Tic_Tac_Toe::Computer_Movie() {
	cout << " My Move ";
	Minimax moves = Move();
	cout << moves.row << moves.col << endl;
	Board[moves.row][moves.col] = Player::COMPUTER;
	print_Board();
}



Tic_Tac_Toe::Tic_Tac_Toe() {
	for (int row = 0; row < Num_Rows; row++)
	{
		for (int col = 0; col < Num_Cols; col++)
		{
			Board[row][col] = Player::none;
		}
	}
}

void Tic_Tac_Toe::print_Board() {
	
	for (int row = 0; row < Num_Rows; row++)
	{
		
		cout << setw(25) << " |        | " << endl;
		cout << setw(25) << " |        | " << endl;
		cout << setw(25) << " |        | " << endl;
		cout << setw(25) << " |        | " << endl;
		for (int col = 0; col < Num_Cols; col++)
		{
			cout << setw(10) << static_cast<char>(Board[row][col]);
		}
		cout << endl;
		if (row < 2)
		{
			cout << setw(35) << " ---------------------------- " << endl;

		}

	}
}




bool Tic_Tac_Toe::ISTIE(Player tie) {

	if (Board[0][0] != tie && Board[0][1] != tie && Board[0][2] != tie && Board[1][0] != tie && Board[1][1] != tie && Board[1][2] != tie && Board[2][0] != tie && Board[2][1] != tie && Board[2][2] != tie)
	{
		return true;
	}
	
	else
	{
		return false;
	}
}

void Tic_Tac_Toe::Game() {
	cout << " *********************** " << endl;
	cout << " welcome to Tic Tac Toe " << endl;
	cout << " Human Vs Human " << endl;
	cout << " -----------------------\n " << endl;
	cout << endl;
	displayboard();
	cout << endl;
	while(Full_Board() != 1)
    {
		if (ISTIE(Player::none) == true)
		{
			cout << endl;
			cout << endl;
			cout << setw(35) << " Tie " << endl;
			exit(0);
		}

		cout << endl;
		cout << endl;
		player_one();
		cout << endl;
		cout << endl;
		if (CHECK_WINNER(Player::PLAYER_ONE) == true)
		{
			cout <<setw(30)<< " Player one has won. " << endl;
			break;
		}
		cout << endl;
		cout << endl;
		player_Two();
		cout << endl;
	} 
	
}

void Tic_Tac_Toe::player_one() {
		int choose = 0;
		cout << "Enter your chose player one as coordinate system ex(1-9): ";
		cin >> choose;
		while (choose < 0 || choose > 9 || !cin)
		{
			cin.clear();
			cin.ignore('300', '\n');
			cout << " Incorrect retype !" << endl;
			cout << "Enter your chose player one as coordinate system ex(1-9): ";
			cin >> choose;
		}
		if (choose == 1)
		{
			Board[0][0] = Player::PLAYER_ONE;
			cout << endl;
			print_Board();
			cout << endl;
		}
		else if (choose == 2)
		{
			Board[0][1] = Player::PLAYER_ONE;
			cout << endl;
			print_Board();
			cout << endl;
		}
		else if (choose == 3)
		{

			Board[0][2] = Player::PLAYER_ONE;
			cout << endl;
			print_Board();
			cout << endl;
		}
		else if (choose == 4)
		{
			Board[1][0] = Player::PLAYER_ONE;
			cout << endl;
			print_Board();
			cout << endl;
		}
		else if (choose == 5)
		{
			Board[1][1] = Player::PLAYER_ONE;
			cout << endl;
			print_Board();
			cout << endl;

		}
		else if (choose == 6)
		{
			Board[1][2] = Player::PLAYER_ONE;
			cout << endl;
			print_Board();
			cout << endl;

		}
		else if (choose == 7)
		{
			Board[2][0] = Player::PLAYER_ONE;
			cout << endl;
			print_Board();
			cout << endl;

		}
		else if (choose == 8)
		{
			Board[2][1] = Player::PLAYER_ONE;
			cout << endl;
			print_Board();
			cout << endl;

		}
		else if (choose == 9)
		{
			Board[2][2] = Player::PLAYER_ONE;
			cout << endl;
			print_Board();
			cout << endl;

		}
		if (ISTIE(Player::none) == true)
		{
			cout << endl;
			cout << endl;
			cout << setw(25) << " Tie " << endl;
			exit(0);
		}
	
}


void Tic_Tac_Toe::player_Two() {

	int choose = 0;
	cout << "Enter your chose player two as coordinate system ex(1-9): ";
	cin >> choose;
	while (choose < 0 || choose > 9 || !cin)
	{
		cin.clear();
		cin.ignore('300', '\n');
		cout << " Incorrect retype !" << endl;
		cout << "Enter your chose player two as coordinate system ex(1-9): ";
		cin >> choose;
	}

	if (choose == 1)
	{
		Board[0][0] = Player::PLAYER_TWO;
		cout << endl;
		print_Board();
		cout << endl;
	}
	else if (choose == 2)
	{
		Board[0][1] = Player::PLAYER_TWO;
		cout << endl;
		print_Board();
		cout << endl;
	}
	else if (choose == 3)
	{
		Board[0][2] = Player::PLAYER_TWO;
		cout << endl;
		print_Board();
		cout << endl;
	}
	else if (choose == 4)
	{
		Board[1][0] = Player::PLAYER_TWO;
		cout << endl;
		print_Board();
		cout << endl;
	}
	else if (choose == 5)
	{
		Board[1][1] = Player::PLAYER_TWO;
		cout << endl;
		print_Board();
		cout << endl;
	}
	else if (choose == 6)
	{
		Board[1][2] = Player::PLAYER_TWO;
		cout << endl;
		print_Board();
		cout << endl;

	}
	else if (choose == 7)
	{
		Board[2][0] = Player::PLAYER_TWO;
		cout << endl;
		print_Board();
		cout << endl;

	}
	else if (choose == 8)
	{
		Board[2][1] = Player::PLAYER_TWO;
		cout << endl;
		print_Board();
		cout << endl;

	}
	else if (choose == 9)
	{
		Board[2][2] = Player::PLAYER_TWO;
		cout << endl;
		print_Board();
		cout << endl;

	}
	if (ISTIE(Player::none) == true)
	{
		cout << endl;
		cout << endl;
		cout << setw(35) << " Tie " << endl;
		exit(0);
	}

}


bool Tic_Tac_Toe::CHECK_WINNER(Player player)
{
	for (int row = 0; row < Num_Rows; row++)
	{
		if (Board[row][0] == player && Board[row][1] == player && Board[row][2] == player)
		{
			return true;
		}
	}

	for (int col = 0; col < Num_Cols; col++)
	{
		if (Board[0][col] == player && Board[1][col] == player && Board[2][col] == player)
		{
			return true;
		}

	}

	if (Board[0][0] == player && Board[1][1] == player && Board[2][2] == player)
	{
		return true;
	}

	if (Board[0][2] == player && Board[1][1] == player && Board[2][0] == player)
	{
		return true;
	}
	else
	{
		return false;
	}
}
// MAIN FILE
#pragma warning(disable:4996)
#include<iostream>
#include<iomanip>
#include"Tic_Tac_Toe.h"
#include<algorithm>
#include<limits>

using namespace std;

int main()
{
	Tic_Tac_Toe A1;
	A1.choose();
	
	return 0;
}




